import {FC, MouseEvent, useState} from 'react';
import { useSelector } from 'react-redux';
import { Link, useNavigate } from 'react-router-dom';
import { CartItem } from '../components/';
import { selectTotalCount } from '../redux/cart/selectors';
import { clearProducts } from '../redux/cart/slice';
import { RootState, useAppDispatch } from '../redux/store';
import { selectIsAuth } from '../redux/auth/slice';
import axios from '../core/axios';
import ErrorPopup from '../components/ErrorPopup';
import { GoodItem } from '../redux/goods/types';

const Cart: FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const items = useSelector((state: RootState) => state.cart.items);
  const totalCount = useSelector(selectTotalCount);
  const totalPrice = useSelector((state: RootState) => state.cart.totalPrice);
  const [title, setTitle] = useState('');
  const [open, setOpen] = useState(false);
  let deletedList: GoodItem[] = [];
  const isAuth = useSelector(selectIsAuth);
  
  const handleClear = () => {
    dispatch(clearProducts());
  };

  const handlePay = async (e: MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    const {data} = await axios.get('/goods');
    items.forEach((item) => {    
      const foundItem = data.find((dataItem: { _id: string; }) => dataItem._id === item._id);
      if (!foundItem) {        
        deletedList.push(item);
      }
    });
    
    if (deletedList.length) {
      setTitle(deletedList?.[0]?.title)
      setOpen(true);
      window.scrollTo(0, 0);
    } else{
      navigate('/pay');
    }
    return deletedList = [];
  }


  if (items.length < 1) {
    return (
      <div className="cart cart--empty">
        <div className="container">
          <div className="cart__inner">
            <h2 className="title">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüòï</h2>
            <p className="cart__text">
              –í–µ—Ä–æ—è—Ç–Ω–µ–π –≤—Å–µ–≥–æ, –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã,
              –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </p>
            <Link className="cart__link" to="/">
              <span>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</span>
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <section className="cart">
        <div className="container container-s">
          <div className="cart__inner">
            <div className="cart__top">
              {title && <ErrorPopup text={`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ "${title}" —É–∂–µ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ`} open={open} setOpen={setOpen} />}
              <h2 className="title cart__title">–ö–æ—Ä–∑–∏–Ω–∞</h2>
              <button className="cart__clear" onClick={handleClear}>
                –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
              </button>
            </div>
            <div className="cart__items">
              {items.map((item: { _id: string, imageUrl: string, title: string, price: number, category: number, count: number}) => (
                <CartItem {...item} key={item._id} />
              ))}
            </div>
            <div className="cart-bottom">
              <div className="cart-bottom__counter">
                –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <span>{totalCount} —à—Ç.</span>
              </div>
              <p className="cart-bottom__price">
                –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <span>{totalPrice.toLocaleString('ru-RU')}‚ÇΩ</span>
              </p>
            </div>
            <div className="cart-buttons">
              <Link to="/" className="cart-buttons__back">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
              </Link>
              {isAuth 
              ? <button onClick={handlePay} className="cart-buttons__pay">–û–ø–ª–∞—Ç–∏—Ç—å</button>
              : <Link className="cart-buttons__pay" to='/register'>–û–ø–ª–∞—Ç–∏—Ç—å</Link> }
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default Cart;
